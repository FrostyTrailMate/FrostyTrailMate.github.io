from sentinelhub import SHConfig, SentinelHubRequest, bbox_to_dimensions, DataCollection, MimeType
from datetime import datetime
import earthpy.spatial as es
import earthpy.io as eio
from ipyleaflet import Map, Polygon, DrawControl

##################################### Start Sentinel-1 data pull request #########################################
# Set up Sentinel Hub configuration
config = SHConfig()
config.instance_id = '44b8b66c-925c-4ab5-a776-b1f48364172d'
# Function to handle user input and download Sentinel-1 data
def download_sentinel_data(bbox, time_range, output_path):
    resolution = 10  # Resolution in meters
    image_width, image_height = bbox_to_dimensions(bbox, resolution=resolution)

    request_params = {
        'data_collection': DataCollection.SENTINEL1_GRD,
        'bbox': bbox,
        'time': time_range,
        'width': image_width,
        'height': image_height,
        'config': config,
    }

    request = SentinelHubRequest(**request_params)
    data = request.get_data()

    # Save the data
    for idx, time_slice in enumerate(data):
        image_path = f'sentinel1_image_{idx}.tif'
        time_slice.save(image_path)
        print(f'Saved image {image_path}')

# Function to handle map drawing
def handle_map_drawn(event, **kwargs):
    bbox = event['geometry']['coordinates'][0]
    time_range = (start_date_picker.value, end_date_picker.value)
    output_path = 'sentinel1_image.tif'
    download_sentinel_data(bbox, time_range, output_path)

# Create an interactive map with a drawing control
m = Map(center=(45, 10), zoom=4)
draw_control = DrawControl()
m.add_control(draw_control)

# Date picker widgets for time range
start_date_picker = widgets.DatePicker(description='Start Date', value=datetime.today)
end_date_picker = widgets.DatePicker(description='End Date', value=datetime.today)

# Display the map and date pickers
display(m, start_date_picker, end_date_picker)

# Event handler for map drawing
draw_control.on_draw(handle_map_drawn)





##################################### Start USGS DEM data pull request ##########################################


# Machine2Machine key
m2m_key = 'gpul8A@ScIhEe2DG!EGFgUUxKPnLREn@7@yCO6TFoo9!Z1FHnMu4OegGUEhaWpdx'

# Function to handle user input and download DEM data
def download_dem_data(bbox, output_path):
    es.download_earthexplorer_data(
        m2m_key=m2m_key,
        bbox=bbox,
        product="SRTM 1 Arc-Second Global",
        output_path=output_path,
        overwrite=True
    )
    print(f'DEM data downloaded and saved to {output_path}')

# Interactive map for user input
def handle_polygon_drawn(event, **kwargs):
    bbox = event['geometry']['coordinates'][0]
    output_path = 'dem.tif'
    download_dem_data(bbox, output_path)

# Create an interactive map with a drawing control
m = Map(center=(34, -118), zoom=10)
polygon = Polygon()
m.add_layer(polygon)
m.on_draw(handle_polygon_drawn)

# Display the map
m
  





#####################################  ##########################################



#####################################  ##########################################



#####################################  ##########################################



#####################################  ##########################################



#####################################  ##########################################



#####################################  ##########################################



#####################################  ##########################################
